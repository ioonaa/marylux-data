buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.16'
    }
}

apply plugin: 'base'

import org.yaml.snakeyaml.Yaml

group 'de.dfki.mary'
version '0.1'

task downloadAudio {
    def audioFile = file('marylux-data.flac')
    outputs.upToDateWhen { audioFile.exists() }
    doLast {
        audioFile.withOutputStream { out ->
            out << new URL('https://github.com/marytts/marylux-data/releases/download/v0.1/marylux-data-0.1.flac').openStream()
        }
    }
}

task text {
    def yamlFile = file('marylux-data.yaml')
    def destDir = file("$buildDir/text")
    inputs.files yamlFile
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        new Yaml().load(yamlFile.newReader()).each { utterance ->
            new File(destDir, "${utterance.prompt}.txt").text = utterance.text.replaceAll("''", "'")
        }
    }
}

task wav {
    def yamlFile = file('marylux-data.yaml')
    def audioFile = file('marylux-data.flac')
    def destDir = file("$buildDir/wav")
    inputs.files yamlFile, audioFile
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        new Yaml().load(yamlFile.newReader()).each { utterance ->
            exec {
                commandLine 'sox', audioFile, "$destDir/${utterance.prompt}.wav", 'trim', utterance.start, '=' + utterance.end
            }
        }
    }
}

task lab {
    def yamlFile = file('marylux-data.yaml')
    def destDir = file("$buildDir/lab")
    inputs.files yamlFile
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        new Yaml().load(yamlFile.newReader()).each { utterance ->
            if (utterance.segments) {
                new File(destDir, "${utterance.prompt}.lab").withWriter { out ->
                    out.println "#"
                    def end = 0f
                    utterance.segments.each { segment ->
                        end += segment.dur as float
                        out.println "\t${end.round(3)}\t125\t$segment.lab"
                    }
                }
            }
        }
    }
}
